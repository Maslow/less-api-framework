///////////////////////////////////////////////////////////////////////
//                                                                   //
// this file is autogenerated by service-generate                    //
// do not edit this file manually                                    //
//                                                                   //
///////////////////////////////////////////////////////////////////////
/// <reference path = "api-auto.d.ts" />
import request from "@/utils/request";

/**
 * Create a new function
 */
export async function FunctionsControllerCreate(
  params: Definitions.CreateFunctionDto | any,
): Promise<Paths.FunctionsControllerCreate.Responses> {
  // /v1/apps/{appid}/functions
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions`, {
    method: "POST",
    data: params,
  });
}

/**
 * Query function list of an app
 */
export async function FunctionsControllerFindAll(
  params: Paths.FunctionsControllerFindAll.BodyParameters | any,
): Promise<Paths.FunctionsControllerFindAll.Responses> {
  // /v1/apps/{appid}/functions
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions`, {
    method: "GET",
    params: params,
  });
}

/**
 * Get a function by its name
 */
export async function FunctionsControllerFindOne(
  params: Paths.FunctionsControllerFindOne.BodyParameters | any,
): Promise<Paths.FunctionsControllerFindOne.Responses> {
  // /v1/apps/{appid}/functions/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}`, {
    method: "GET",
    params: params,
  });
}

/**
 * Update a function
 */
export async function FunctionsControllerUpdate(
  params: Definitions.UpdateFunctionDto | any,
): Promise<Paths.FunctionsControllerUpdate.Responses> {
  // /v1/apps/{appid}/functions/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}`, {
    method: "PATCH",
    data: params,
  });
}

/**
 * Delete a function
 */
export async function FunctionsControllerRemove(
  params: Paths.FunctionsControllerRemove.BodyParameters | any,
): Promise<Paths.FunctionsControllerRemove.Responses> {
  // /v1/apps/{appid}/functions/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}`, {
    method: "DELETE",
    data: params,
  });
}

/**
 * Compile a function
 */
export async function FunctionsControllerCompile(
  params: Paths.FunctionsControllerCompile.BodyParameters | any,
): Promise<Paths.FunctionsControllerCompile.Responses> {
  // /v1/apps/{appid}/functions/{name}/compile
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}/compile`, {
    method: "POST",
    data: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function PoliciesControllerCreate(
  params: Definitions.CreatePolicyDto | any,
): Promise<Paths.PoliciesControllerCreate.Responses> {
  // /v1/apps/{appid}/policies
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/policies`, {
    method: "POST",
    data: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function PoliciesControllerFindAll(
  params: Paths.PoliciesControllerFindAll.BodyParameters | any,
): Promise<Paths.PoliciesControllerFindAll.Responses> {
  // /v1/apps/{appid}/policies
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/policies`, {
    method: "GET",
    params: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function PoliciesControllerFindOne(
  params: Paths.PoliciesControllerFindOne.BodyParameters | any,
): Promise<Paths.PoliciesControllerFindOne.Responses> {
  // /v1/apps/{appid}/policies/{id}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/policies/${_params.id}`, {
    method: "GET",
    params: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function PoliciesControllerUpdate(
  params: Definitions.UpdatePolicyDto | any,
): Promise<Paths.PoliciesControllerUpdate.Responses> {
  // /v1/apps/{appid}/policies/{id}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/policies/${_params.id}`, {
    method: "PATCH",
    data: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function PoliciesControllerRemove(
  params: Paths.PoliciesControllerRemove.BodyParameters | any,
): Promise<Paths.PoliciesControllerRemove.Responses> {
  // /v1/apps/{appid}/policies/{id}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/policies/${_params.id}`, {
    method: "DELETE",
    data: params,
  });
}

/**
 * Create a new bucket
 */
export async function BucketsControllerCreate(
  params: Definitions.CreateBucketDto | any,
): Promise<Paths.BucketsControllerCreate.Responses> {
  // /v1/apps/{appid}/buckets
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/buckets`, {
    method: "POST",
    data: params,
  });
}

/**
 * Get bucket list of an app
 */
export async function BucketsControllerFindAll(
  params: Paths.BucketsControllerFindAll.BodyParameters | any,
): Promise<Paths.BucketsControllerFindAll.Responses> {
  // /v1/apps/{appid}/buckets
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/buckets`, {
    method: "GET",
    params: params,
  });
}

/**
 * Get a bucket by name
 */
export async function BucketsControllerFindOne(
  params: Paths.BucketsControllerFindOne.BodyParameters | any,
): Promise<Paths.BucketsControllerFindOne.Responses> {
  // /v1/apps/{appid}/buckets/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/buckets/${_params.name}`, {
    method: "GET",
    params: params,
  });
}

/**
 * Update a bucket
 */
export async function BucketsControllerUpdate(
  params: Definitions.UpdateBucketDto | any,
): Promise<Paths.BucketsControllerUpdate.Responses> {
  // /v1/apps/{appid}/buckets/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/buckets/${_params.name}`, {
    method: "PATCH",
    data: params,
  });
}

/**
 * Delete a bucket
 */
export async function BucketsControllerRemove(
  params: Paths.BucketsControllerRemove.BodyParameters | any,
): Promise<Paths.BucketsControllerRemove.Responses> {
  // /v1/apps/{appid}/buckets/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/buckets/${_params.name}`, {
    method: "DELETE",
    data: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function WebsitesControllerCreate(
  params: Definitions.CreateWebsiteDto | any,
): Promise<Paths.WebsitesControllerCreate.Responses> {
  // /v1/apps/{appid}/websites
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/websites`, {
    method: "POST",
    data: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function WebsitesControllerFindAll(
  params: Paths.WebsitesControllerFindAll.BodyParameters | any,
): Promise<Paths.WebsitesControllerFindAll.Responses> {
  // /v1/apps/{appid}/websites
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/websites`, {
    method: "GET",
    params: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function WebsitesControllerFindOne(
  params: Paths.WebsitesControllerFindOne.BodyParameters | any,
): Promise<Paths.WebsitesControllerFindOne.Responses> {
  // /v1/apps/{appid}/websites/{id}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/websites/${_params.id}`, {
    method: "GET",
    params: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function WebsitesControllerUpdate(
  params: Definitions.UpdateWebsiteDto | any,
): Promise<Paths.WebsitesControllerUpdate.Responses> {
  // /v1/apps/{appid}/websites/{id}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/websites/${_params.id}`, {
    method: "PATCH",
    data: params,
  });
}

/**
 * TODO - ⌛️
 */
export async function WebsitesControllerRemove(
  params: Paths.WebsitesControllerRemove.BodyParameters | any,
): Promise<Paths.WebsitesControllerRemove.Responses> {
  // /v1/apps/{appid}/websites/{id}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/websites/${_params.id}`, {
    method: "DELETE",
    data: params,
  });
}

/**
 * Create a new collection in database
 */
export async function CollectionsControllerCreate(
  params: Definitions.CreateCollectionDto | any,
): Promise<Paths.CollectionsControllerCreate.Responses> {
  // /v1/apps/{appid}/collections
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections`, {
    method: "POST",
    data: params,
  });
}

/**
 * Get collection list of an application
 */
export async function CollectionsControllerFindAll(
  params: Paths.CollectionsControllerFindAll.BodyParameters | any,
): Promise<Paths.CollectionsControllerFindAll.Responses> {
  // /v1/apps/{appid}/collections
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections`, {
    method: "GET",
    params: params,
  });
}

/**
 * Get collection by name
 */
export async function CollectionsControllerFindOne(
  params: Paths.CollectionsControllerFindOne.BodyParameters | any,
): Promise<Paths.CollectionsControllerFindOne.Responses> {
  // /v1/apps/{appid}/collections/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections/${_params.name}`, {
    method: "GET",
    params: params,
  });
}

/**
 * Update a collection
 */
export async function CollectionsControllerUpdate(
  params: Definitions.UpdateCollectionDto | any,
): Promise<Paths.CollectionsControllerUpdate.Responses> {
  // /v1/apps/{appid}/collections/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections/${_params.name}`, {
    method: "PATCH",
    data: params,
  });
}

/**
 * Delete a collection by its name
 */
export async function CollectionsControllerRemove(
  params: Paths.CollectionsControllerRemove.BodyParameters | any,
): Promise<Paths.CollectionsControllerRemove.Responses> {
  // /v1/apps/{appid}/collections/{name}
  let _params: { [key: string]: any } = {
    appid: localStorage.getItem("app"),
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections/${_params.name}`, {
    method: "DELETE",
    data: params,
  });
}
