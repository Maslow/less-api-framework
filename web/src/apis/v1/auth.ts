// @ts-ignore
/* eslint-disable */
///////////////////////////////////////////////////////////////////////
//                                                                   //
// this file is autogenerated by service-generate                    //
// do not edit this file manually                                    //
//                                                                   //
///////////////////////////////////////////////////////////////////////
/// <reference path = "api-auto.d.ts" />
import request from "@/utils/request";

/**
 * Sign up
 */
export async function AuthControllerSignup(
  params: Paths.AuthControllerSignup.BodyParameters | any,
): Promise<Paths.AuthControllerSignup.Responses> {
  return request(`/v1/auth/passwd/signup`, {
    method: "POST",
    data: params,
  });
}

/**
 * Sign in by password
 */
export async function AuthControllerSigninByPassword(
  params: Paths.AuthControllerSigninByPassword.BodyParameters | any,
): Promise<Paths.AuthControllerSigninByPassword.Responses> {
  return request(`/v1/auth/passwd/signin`, {
    method: "POST",
    data: params,
  });
}

/**
 * Sign in by sms code
 * @param {string} phone
 * @param {string} code
 */
export async function AuthControllerSigninBySmsCode(
  params: Paths.AuthControllerSigninBySmsCode.BodyParameters | any,
): Promise<Paths.AuthControllerSigninBySmsCode.Responses> {
  return request(`/v1/auth/phone/signin`, {
    method: "POST",
    data: params,
  });
}

/**
 * Send sms code
 * @param {string} phone
 * @param {string} type
 */
export async function AuthControllerSendSmsCode(
  params: Paths.AuthControllerSendSmsCode.BodyParameters | any,
): Promise<Paths.AuthControllerSendSmsCode.Responses> {
  return request(`/v1/auth/phone/sms/code`, {
    method: "POST",
    data: params,
  });
}

/**
 * reset password
 * @param {string} phone
 * @param {string} code
 * @param {string} password
 * @param {string} confirmPassword
 * @param {string} type
 */
export async function AuthControllerResetPassword(
  params: Paths.AuthControllerResetPassword.BodyParameters | any,
): Promise<Paths.AuthControllerResetPassword.Responses> {
  return request(`/v1/auth/passwd/reset`, {
    method: "POST",
    data: params,
  });
}

/**
 * get providers
 */
export async function AuthControllerGetProviders(
  params: Paths.AuthControllerGetProviders.BodyParameters | any,
): Promise<Paths.AuthControllerGetProviders.Responses> {
  return request(`/v1/auth/providers`, {
    method: "GET",
    params: params,
  });
}

/**
 * bind phone
 * @param {string} phone
 * @param {string} code
 */
export async function AuthControllerBindPhone(
  params: Paths.AuthControllerBindPhone.BodyParameters | any,
): Promise<Paths.AuthControllerBindPhone.Responses> {
  return request(`/v1/auth/bind/phone`, {
    method: "POST",
    data: params,
  });
}

/**
 * bind username
 */
export async function AuthControllerBindUsername(
  params: Paths.AuthControllerBindUsername.BodyParameters | any,
): Promise<Paths.AuthControllerBindUsername.Responses> {
  return request(`/v1/auth/bind/username`, {
    method: "POST",
    data: params,
  });
}
