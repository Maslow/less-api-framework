apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: database-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: databases.database.laf.dev
spec:
  group: database.laf.dev
  names:
    kind: Database
    listKind: DatabaseList
    plural: databases
    shortNames:
    - database
    singular: database
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.provider
      name: PROVIDER
      type: string
    - jsonPath: .spec.region
      name: REGION
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: Database is the Schema for the databases API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DatabaseSpec defines the desired state of Database
            properties:
              capacity:
                description: Capacity desired.
                properties:
                  storage:
                    anyOf:
                    - type: integer
                    - type: string
                    description: The storage space of database.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                type: object
              password:
                description: Password of the database.
                maxLength: 64
                minLength: 16
                type: string
              provider:
                description: Provider name of the database. The controller will create
                  the corresponding storage resources based on this provider.
                type: string
              region:
                description: Region of the database.
                type: string
              username:
                description: Username of the database.
                maxLength: 32
                minLength: 6
                type: string
            required:
            - capacity
            - password
            - provider
            - region
            - username
            type: object
          status:
            description: DatabaseStatus defines the observed state of Database
            properties:
              capacity:
                description: Capacity observed by the controller
                properties:
                  storage:
                    anyOf:
                    - type: integer
                    - type: string
                    description: The storage space of database.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                type: object
              conditions:
                description: 'Conditions of the database - type: Ready status: True'
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              connectionUri:
                description: ConnectionUri of the database.
                type: string
              storeName:
                description: Store name of this database. The controller has created
                  the corresponding storage resources based on this store.
                type: string
              storeNamespace:
                type: string
            required:
            - connectionUri
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: stores.database.laf.dev
spec:
  group: database.laf.dev
  names:
    kind: Store
    listKind: StoreList
    plural: stores
    singular: store
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Store is the Schema for the stores API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StoreSpec defines the desired state of Store
            properties:
              capacity:
                description: The capacity of the store.
                properties:
                  collectionCount:
                    default: 0
                    description: The number of collections. The default value is 0
                      which means unlimited.
                    format: int64
                    minimum: 0
                    type: integer
                  databaseCount:
                    default: 0
                    description: The number of databases. The default value is 0 which
                      means unlimited.
                    format: int64
                    minimum: 0
                    type: integer
                  storage:
                    anyOf:
                    - type: integer
                    - type: string
                    description: The storage space.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  userCount:
                    description: The user count of a store.
                    format: int64
                    type: integer
                type: object
              connectionUri:
                description: The connection uri of the store.
                type: string
              priority:
                default: 10
                description: Priority of the store. The higher the priority, the first
                  to be selected. If this value is 0, this store will not be selected
                  for allocating new database.
                format: int32
                maximum: 100
                minimum: 0
                type: integer
              provider:
                default: mongodb
                description: The provider of the store, defaults to "mongodb".
                maxLength: 64
                minLength: 2
                type: string
              region:
                default: default
                description: The region of the store, defaults to "default".
                maxLength: 64
                minLength: 2
                pattern: ^[a-z0-9-]+$
                type: string
            required:
            - connectionUri
            - provider
            - region
            type: object
          status:
            description: StoreStatus defines the observed state of Store
            properties:
              capacity:
                description: The observed capacity of the store.
                properties:
                  collectionCount:
                    default: 0
                    description: The number of collections. The default value is 0
                      which means unlimited.
                    format: int64
                    minimum: 0
                    type: integer
                  databaseCount:
                    default: 0
                    description: The number of databases. The default value is 0 which
                      means unlimited.
                    format: int64
                    minimum: 0
                    type: integer
                  storage:
                    anyOf:
                    - type: integer
                    - type: string
                    description: The storage space.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  userCount:
                    description: The user count of a store.
                    format: int64
                    type: integer
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: database-controller-manager
  namespace: database-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: database-leader-election-role
  namespace: database-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: database-manager-role
rules:
- apiGroups:
  - database.laf.dev
  resources:
  - databases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - database.laf.dev
  resources:
  - databases/finalizers
  verbs:
  - update
- apiGroups:
  - database.laf.dev
  resources:
  - databases/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - database.laf.dev
  resources:
  - stores
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - database.laf.dev
  resources:
  - stores/finalizers
  verbs:
  - update
- apiGroups:
  - database.laf.dev
  resources:
  - stores/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: database-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: database-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: database-leader-election-rolebinding
  namespace: database-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: database-leader-election-role
subjects:
- kind: ServiceAccount
  name: database-controller-manager
  namespace: database-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: database-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: database-manager-role
subjects:
- kind: ServiceAccount
  name: database-controller-manager
  namespace: database-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: database-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: database-proxy-role
subjects:
- kind: ServiceAccount
  name: database-controller-manager
  namespace: database-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 3e4d01bb.laf.dev
    # leaderElectionReleaseOnCancel defines if the leader should step down volume
    # when the Manager ends. This requires the binary to immediately end when the
    # Manager is stopped, otherwise, this setting is unsafe. Setting this significantly
    # speeds up voluntary leader transitions as the new leader don't have to wait
    # LeaseDuration time first.
    # In the default scaffold provided, the program ends immediately after
    # the manager stops, so would be fine to enable this option. However,
    # if you are doing or is intended to do any operation such as perform cleanups
    # after the manager stops then its usage might be unsafe.
    # leaderElectionReleaseOnCancel: true
kind: ConfigMap
metadata:
  name: database-manager-config
  namespace: database-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: database-controller-manager-metrics-service
  namespace: database-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: database-controller-manager
  namespace: database-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: docker.io/lafyun/kube-rbac-proxy:v0.12.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: ghcr.io/labring/laf-database-controller:dev
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: database-controller-manager
      terminationGracePeriodSeconds: 10
