import { NextApiRequest, NextApiResponse } from "next";

import { JsonResp } from "./response";

export default async function handler(req: NextApiRequest, resp: NextApiResponse) {
  const {
    query: { id, name },
    method,
  } = req;
  switch (method) {
    case "GET":
      JsonResp(
        [
          {
            _id: "62da6670583927a711b311e2",
            name: "admin-create__5YAAoenl",
            code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\nconst db = cloud.database()\n\nexports.main = async function (ctx: FunctionContext) {\n  const uid = ctx.auth?.uid\n  if (!uid) {\n    return 'Unauthorisszssed'\n  }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.create')\n  if (code) {\n    return 'Permission denied'\n  }\n\n  const { username, password, avatar, name, roles } = ctx.body\n  if (!username || !password) {\n    return 'username or password cannot be empty'\n  }\n\n  // 验证用户是否已存在\n  const { total } = await db.collection('admins').where({ username }).count()\n  if (total > 0) {\n    return 'username already exists'\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return 'invalid roles'\n  }\n\n  // add admin\n  const r = await db.collection('admins')\n    .add({\n      username,\n      name: name ?? null,\n      avatar: avatar ?? null,\n      roles: roles ?? [],\n      password: hashPassword(password),\n      created_at: Date.now(),\n      updated_at: Date.now()\n    })\n\n  return {\n    ...r,\n    uid: r.id\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "Admin: 创建管理员",
            hash: "c6a7fb39f762297a30c8e96391b4e4ac",
            tags: ["后台管理"],
            description: "",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams:
              '{"username":"laf","password":"laf","avatar":"avatar","name":"lalala","roles":["superadmin"]}',
            version: 12,
            created_at: "2022-07-22T08:57:19.017Z",
            updated_at: "2022-08-18T10:01:06.184Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311af",
            name: "admin-edit",
            code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nconst db = cloud.database()\n\nexports.main = async function (ctx: FunctionContext) {\n\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: '401', error: '未授ssdsd权访问' }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.edit')\n  if (code) {\n    return { code: '403', error: 'Permission denied' }\n  }\n\n  // 参数验证\n  const { _id, username, password, avatar, name, roles } = ctx.body\n  if (!_id) {\n    return { code: 'INVALID_PARAM', error: 'admin id cannot be empty' }\n  }\n\n  // 验证 user _id 是否合法\n  const { data: admin } = await db.collection('admins').where({ _id: _id }).getOne()\n  if (!admin) {\n    return { code: 'INVALID_PARAM', error: 'user not exists' }\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return { code: 'INVALID_PARAM', error: 'invalid roles' }\n  }\n\n  const old = admin\n\n  // update admim\n  const data = { updated_at: Date.now() }\n\n  // update password\n  if (password) {\n    data['password'] = hashPassword(password)\n  }\n\n  // username\n  if (username && username != old.username) {\n    const { total } = await db.collection('admins').where({ username }).count()\n    if (total) return { code: 'INVALID_PARAM', error: 'username already exists' }\n    data['username'] = username\n  }\n\n  // avatar\n  if (avatar && avatar != old.avatar) {\n    data['avatar'] = avatar\n  }\n\n  // name\n  if (name && name != old.name) {\n    data['name'] = name\n  }\n\n  // roles\n  if (roles) {\n    data['roles'] = roles\n  }\n\n  console.log(_id, data)\n  const r = await db.collection('admins')\n    .where({ _id: _id })\n    .update(data)\n\n  return {\n    code: 0,\n    data: { ...r, _id }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "Admin: 编辑管理员",
            hash: "0797d7d9ec5179875226bb24e17009f0",
            tags: ["后台管理"],
            description: "",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams:
              '{"_id":"616fb53f91881afb7d3f609f","username":"admin","password":"123456","name":"lalala","roles":["superadmin"]}',
            version: 9,
            created_at: "2022-07-22T03:39:05.773Z",
            updated_at: "2022-08-18T09:58:58.715Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311e3",
            name: "admin-edit__SAj9WsnP",
            code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nconst db = cloud.database()\n\nexports.main = async function (ctx: FunctionContext) {\n\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: '401', error: '未授权访问' }\n\n  // 权限验证\n  const code = await checkPermission(uid, 'admin.edit')\n  if (code) {\n    return { code: '403', error: 'Permission denied' }\n  }\n\n  // 参数验证\n  const { _id, username, password, avatar, name, roles } = ctx.body\n  if (!_id) {\n    return { code: 'INVALID_PARAM', error: 'admin id cannot be empty' }\n  }\n\n  // 验证 user _id 是否合法\n  const { data: admin } = await db.collection('admins').where({ _id: _id }).getOne()\n  if (!admin) {\n    return { code: 'INVALID_PARAM', error: 'user not exists' }\n  }\n\n  // 验证 roles 是否合法\n  const { total: valid_count } = await db.collection('roles')\n    .where({\n      name: db.command.in(roles)\n    }).count()\n\n  if (valid_count !== roles.length) {\n    return { code: 'INVALID_PARAM', error: 'invalid roles' }\n  }\n\n  const old = admin\n\n  // update admim\n  const data = { updated_at: Date.now() }\n\n  // update password\n  if (password) {\n    data['password'] = hashPassword(password)\n  }\n\n  // username\n  if (username && username != old.username) {\n    const { total } = await db.collection('admins').where({ username }).count()\n    if (total) return { code: 'INVALID_PARAM', error: 'username already exists' }\n    data['username'] = username\n  }\n\n  // avatar\n  if (avatar && avatar != old.avatar) {\n    data['avatar'] = avatar\n  }\n\n  // name\n  if (name && name != old.name) {\n    data['name'] = name\n  }\n\n  // roles\n  if (roles) {\n    data['roles'] = roles\n  }\n\n  console.log(_id, data)\n  const r = await db.collection('admins')\n    .where({ _id: _id })\n    .update(data)\n\n  return {\n    code: 0,\n    data: { ...r, _id }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "Admin: 编辑管理员",
            hash: "f7d31a0d2b2aba882c9b94d1a6063be7",
            tags: ["后台管理"],
            description: "",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams:
              '{"_id":"616fb53f91881afb7d3f609f","username":"admin","password":"123456","name":"lalala","roles":["superadmin"]}',
            version: 4,
            created_at: "2022-07-22T08:57:19.060Z",
            updated_at: "2022-07-22T08:57:19.060Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311b0",
            name: "admin-getinfo",
            code: "import cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: 'NO_AUTH', error: \"permission denied\" }\n\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n  delete admin['password']\n  const { permissions } = await getPermissions(admin._id)\n\n  return {\n    error_code: \"0\",\n    data: {\n      ...admin,\n      permissions\n    }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}",
            label: "Admin: 获取管理员信息",
            hash: "a6926d3662f6c97a3428b6821f68107d",
            tags: ["后台管理"],
            description: "",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams: '{"code":"laf"}',
            version: 2,
            created_at: "2022-07-22T03:39:05.864Z",
            updated_at: "2022-07-22T03:39:05.864Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311e4",
            name: "admin-getinfo__SY1PgEq7",
            code: "import cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n  const uid = ctx.auth?.uid\n  if (!uid) return { code: 'NO_AUTH', error: \"permission denied\" }\n\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n  delete admin['password']\n  const { permissions } = await getPermissions(admin._id)\n\n  return {\n    error_code: \"0\",\n    data: {\n      ...admin,\n      permissions\n    }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}",
            label: "Admin: 获取管理员信息",
            hash: "a6926d3662f6c97a3428b6821f68107d",
            tags: ["后台管理"],
            description: "",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams: '{"code":"laf"}',
            version: 2,
            created_at: "2022-07-22T08:57:19.183Z",
            updated_at: "2022-07-22T08:57:19.183Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311b1",
            name: "admin-login",
            code: "\n\nimport cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n\n  const { username, password } = ctx.body\n  if (!username || !password)\n    return { code: 'INVALID_PARAM', error: \"账号和密码不可为空\" }\n\n  const { data: admin} = await db.collection('admins')\n    .where({ username, password: hashPassword(password) })\n    .getOne()\n\n  if (!admin)\n    return { code: 'INVALID_PARAM', error: \"账号或密码错误\" }\n\n  // 默认 token 有效期为 7 天\n  const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n  const payload = {\n    uid: admin._id,\n    type: 'admin',\n    exp: expire\n  }\n\n  const access_token = cloud.getToken(payload)\n  return {\n    code: 0,\n    data: {\n      access_token,\n      uid: admin._id,\n      expire\n    }\n  }\n}\n\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "Admin: 管理员登陆",
            hash: "784ca5db40f43ba5e264428e807ea542",
            tags: ["后台管理"],
            description: "",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams: '{\n  "code": "laf"\n}',
            version: 5,
            created_at: "2022-07-22T03:39:05.957Z",
            updated_at: "2022-07-22T03:39:05.957Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311e5",
            name: "admin-login__vYRRdZQO",
            code: "\n\nimport cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n\n  const { username, password } = ctx.body\n  if (!username || !password)\n    return { code: 'INVALID_PARAM', error: \"账号和密码不可为空\" }\n\n  const { data: admin} = await db.collection('admins')\n    .where({ username, password: hashPassword(password) })\n    .getOne()\n\n  if (!admin)\n    return { code: 'INVALID_PARAM', error: \"账号或密码错误\" }\n\n  // 默认 token 有效期为 7 天\n  const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n  const payload = {\n    uid: admin._id,\n    type: 'admin',\n    exp: expire\n  }\n\n  const access_token = cloud.getToken(payload)\n  return {\n    code: 0,\n    data: {\n      access_token,\n      uid: admin._id,\n      expire\n    }\n  }\n}\n\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "Admin: 管理员登陆",
            hash: "784ca5db40f43ba5e264428e807ea542",
            tags: ["后台管理"],
            description: "",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams: '{\n  "code": "laf"\n}',
            version: 5,
            created_at: "2022-07-22T08:57:19.275Z",
            updated_at: "2022-07-22T08:57:19.275Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311b2",
            name: "aliyun-sms-service",
            code: "\nimport cloud from '@/cloud-sdk'\n\n/**\n * @body phone string 手机号\n * @body code string | number 验证码\n */\nexports.main = async function (ctx) {\n  // 加载短信配置\n  const config = await loadAliSmsConfigs()\n\n  const phone = ctx.body?.phone\n  if (!phone) {\n    return { code: 'INVALID_PARAM', error: 'invalid phone' }\n  }\n  const code = ctx.body?.code\n  if (!code) {\n    return { code: 'INVALID_PARAM', error: 'invalid code' }\n  }\n\n  const params = {\n    AccessKeyId: config.accessKeyId,\n    AccessKeySecret: config.accessKeySecret,\n    ApiEntryPoint: config.api_entrypoint,\n    Action: 'SendSms',\n    Version: '2017-05-25',\n    PhoneNumbers: phone,\n    SignName: config.signName,\n    TemplateCode: config.templateCode,\n    TemplateParam: `{\"code\": ${code}}`\n  }\n\n  const data = await cloud.invoke('invoke-aliyun-api', { body: params })\n  console.log(data)\n\n  return {\n    code: 0,\n    data: data\n  }\n}\n\n\n\n/**\n * 加载阿里云短信配置\n */\nasync function loadAliSmsConfigs() {\n  const db = cloud.database()\n  const { data: config } = await db.collection('sys_config')\n    .where({ key: 'alisms' })\n    .getOne()\n\n  const value = config?.value\n\n  if (!value) {\n    throw new Error('加载短信配置失败，是否配置？')\n  }\n\n  return {\n    accessKeyId: value?.accessKeyId,          // 阿里云访问 Key ID\n    accessKeySecret: value?.accessKeySecret,  // 阿里云访问 Key Secret\n    api_entrypoint: value?.api_entrypoint ?? 'https://dysmsapi.aliyuncs.com',\n    signName: value?.signName,          // 短信签名，修改为你的签名，如: \"灼灼信息\"\n    templateCode: value?.templateCode   // 短信模板ID，如 'SMS_217850726'\n  }\n}",
            label: "Service: 短信服务",
            hash: "2f111560f9c5eb2dbca096eccd066ff7",
            tags: ["服务"],
            description: "阿里云通信-发短信内部调用服务，不开启外网访问",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams: '{\n  "phone": "13184211245",\n  "code": "1234"\n}',
            version: 7,
            created_at: "2022-07-22T03:39:06.062Z",
            updated_at: "2022-07-22T03:39:06.062Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311e6",
            name: "aliyun-sms-service__QLbAXYw3",
            code: "\nimport cloud from '@/cloud-sdk'\n\n/**\n * @body phone string 手机号\n * @body code string | number 验证码\n */\nexports.main = async function (ctx) {\n  // 加载短信配置\n  const config = await loadAliSmsConfigs()\n\n  const phone = ctx.body?.phone\n  if (!phone) {\n    return { code: 'INVALID_PARAM', error: 'invalid phone' }\n  }\n  const code = ctx.body?.code\n  if (!code) {\n    return { code: 'INVALID_PARAM', error: 'invalid code' }\n  }\n\n  const params = {\n    AccessKeyId: config.accessKeyId,\n    AccessKeySecret: config.accessKeySecret,\n    ApiEntryPoint: config.api_entrypoint,\n    Action: 'SendSms',\n    Version: '2017-05-25',\n    PhoneNumbers: phone,\n    SignName: config.signName,\n    TemplateCode: config.templateCode,\n    TemplateParam: `{\"code\": ${code}}`\n  }\n\n  const data = await cloud.invoke('invoke-aliyun-api', { body: params })\n  console.log(data)\n\n  return {\n    code: 0,\n    data: data\n  }\n}\n\n\n\n/**\n * 加载阿里云短信配置\n */\nasync function loadAliSmsConfigs() {\n  const db = cloud.database()\n  const { data: config } = await db.collection('sys_config')\n    .where({ key: 'alisms' })\n    .getOne()\n\n  const value = config?.value\n\n  if (!value) {\n    throw new Error('加载短信配置失败，是否配置？')\n  }\n\n  return {\n    accessKeyId: value?.accessKeyId,          // 阿里云访问 Key ID\n    accessKeySecret: value?.accessKeySecret,  // 阿里云访问 Key Secret\n    api_entrypoint: value?.api_entrypoint ?? 'https://dysmsapi.aliyuncs.com',\n    signName: value?.signName,          // 短信签名，修改为你的签名，如: \"灼灼信息\"\n    templateCode: value?.templateCode   // 短信模板ID，如 'SMS_217850726'\n  }\n}",
            label: "Service: 短信服务",
            hash: "2f111560f9c5eb2dbca096eccd066ff7",
            tags: ["服务"],
            description: "阿里云通信-发短信内部调用服务，不开启外网访问",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams: '{\n  "phone": "13184211245",\n  "code": "1234"\n}',
            version: 7,
            created_at: "2022-07-22T08:57:19.357Z",
            updated_at: "2022-07-22T08:57:19.357Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311b3",
            name: "app-login-password",
            code: "import * as crypto from 'crypto'\nimport cloud from '@/cloud-sdk'\n\n/**\n * @body username string 用户名，即手机号\n * @body password string 密码\n */\n\nexports.main = async function (ctx: FunctionContext) {\n  const db = cloud.database()\n\n  // 参数验证\n  const { username, password } = ctx.body\n  if (!username || !password) {\n    return { code: 'INVALID_PARAM', error: '用户名或密码不可为空' }\n  }\n\n  // 验证用户名与密码是否正确\n  const { data: user } = await db.collection('biz_user')\n    .where({\n      username,\n      password: hashPassword(password)\n    })\n    .getOne()\n\n  if (!user)\n    return { code: 'INVALID_PARAM', error: '用户名或密码不正确' }\n\n  // 默认 token 有效期为 7 天\n  const expire = Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7\n  const access_token = cloud.getToken({\n    uid: user._id,\n    exp: expire\n  })\n\n  delete user['password']\n\n  return {\n    code: 0,\n    data: { access_token, user, expire }\n  }\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "App: 用户名+密码登陆",
            hash: "0e24fa405b9fcaac4a57abc329f7dd68",
            tags: ["用户", "App"],
            description: "App: 用户名+密码登陆",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams: '{"username":"18758887214","password":"123456"}',
            version: 15,
            created_at: "2022-07-22T03:39:06.080Z",
            updated_at: "2022-08-20T04:03:49.305Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },

          {
            _id: "62da1bdb583927a711b311b5",
            name: "init_shared_utils",
            code: "\nimport cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx) {\n  cloud.shared.set('checkPermission', checkPermission)\n  \n  return 'ok'\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n",
            label: "Init: 公用函数、对象",
            hash: "03713cc413c218939a23ea7ea81f28b7",
            tags: ["初始化"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams: '{"code":"laf"}',
            version: 0,
            created_at: "2022-07-22T03:39:06.259Z",
            updated_at: "2022-07-22T03:39:06.259Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311ea",
            name: "init_shared_utils__gaVUhWrd",
            code: "\nimport cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx) {\n  cloud.shared.set('checkPermission', checkPermission)\n  \n  return 'ok'\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n",
            label: "Init: 公用函数、对象",
            hash: "03713cc413c218939a23ea7ea81f28b7",
            tags: ["初始化"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams: '{"code":"laf"}',
            version: 0,
            created_at: "2022-07-22T08:57:19.485Z",
            updated_at: "2022-07-22T08:57:19.485Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311b8",
            name: "initializer",
            code: "\n/**\n * 本函数会默认配置 'App:ready' 事件触发器，应用启动并初始化完成后被自动调用。\n * \n * 本函数可用于初始化应用必要的一些配置、数据，通常不需要删除此云函数，也不要开启 HTTP 调用。\n */\n\nimport cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx) {\n\n  await cloud.invoke('init-app-rbac', {})\n    .then(() => console.log('初始化 RBAC'))\n    .catch(err => console.log(err))\n\n  await initIndexes()\n    .then(() => console.log('初始化应用集合索引'))\n    .catch(err => console.log(err))\n\n  await cloud.invoke('init_shared_utils', {})\n    .then(() => console.log('初始化 shared_utils'))\n    .catch(err => console.log(err))\n\n  await cloud.invoke('init-sys-region', {})\n    .then(() => console.log('初始化行政区域数据'))\n    .catch(err => console.log(err))\n\n  return 'ok'\n}\n\n/**\n * 初始化应用集合索引\n */\nasync function initIndexes() {\n  const db = cloud.mongo.db\n  await db.collection('sys_config').createIndex({ key: 1 }, { unique: true })\n  await db.collection('sys_sms_history').createIndex({ phone: 1, created_at: -1 })\n}\n",
            label: "Init: 应用初始化器",
            hash: "3002957459543ba8d770d11d3effc99e",
            tags: ["初始化"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [
              {
                name: "监听应用启动就绪事件",
                type: "event",
                event: "App:ready",
                desc: "",
                status: 1,
                _id: "613a347c1ce6a2f7b5d49c16",
              },
            ],
            debugParams: '{"code":"laf"}',
            version: 13,
            created_at: "2022-07-22T03:39:06.377Z",
            updated_at: "2022-07-22T03:39:06.377Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311ed",
            name: "initializer__DWDxT0rt",
            code: "\n/**\n * 本函数会默认配置 'App:ready' 事件触发器，应用启动并初始化完成后被自动调用。\n * \n * 本函数可用于初始化应用必要的一些配置、数据，通常不需要删除此云函数，也不要开启 HTTP 调用。\n */\n\nimport cloud from '@/cloud-sdk'\n\nexports.main = async function (ctx) {\n\n  await cloud.invoke('init-app-rbac', {})\n    .then(() => console.log('初始化 RBAC'))\n    .catch(err => console.log(err))\n\n  await initIndexes()\n    .then(() => console.log('初始化应用集合索引'))\n    .catch(err => console.log(err))\n\n  await cloud.invoke('init_shared_utils', {})\n    .then(() => console.log('初始化 shared_utils'))\n    .catch(err => console.log(err))\n\n  await cloud.invoke('init-sys-region', {})\n    .then(() => console.log('初始化行政区域数据'))\n    .catch(err => console.log(err))\n\n  return 'ok'\n}\n\n/**\n * 初始化应用集合索引\n */\nasync function initIndexes() {\n  const db = cloud.mongo.db\n  await db.collection('sys_config').createIndex({ key: 1 }, { unique: true })\n  await db.collection('sys_sms_history').createIndex({ phone: 1, created_at: -1 })\n}\n",
            label: "Init: 应用初始化器",
            hash: "3002957459543ba8d770d11d3effc99e",
            tags: ["初始化"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [
              {
                name: "监听应用启动就绪事件",
                type: "event",
                event: "App:ready",
                desc: "",
                status: 1,
                _id: "613a347c1ce6a2f7b5d49c16",
              },
            ],
            debugParams: '{"code":"laf"}',
            version: 15,
            created_at: "2022-07-22T08:57:19.665Z",
            updated_at: "2022-08-18T08:13:12.029Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311b9",
            name: "injector-admin",
            code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\n/**\n * 本函数为 policy injector， 当用户请求 proxy/:policy 时，会调用本函数返回的函数获取该策略的 injections。\n * 返回的 injections 会注入到该策略规则中执行。\n * 例如，本例中返回了 $has 和 $is 函数，则在规则中可以这样使用：\n * ```json\n * {\n *   \"add\": \"$has('article.create')\",\n *   \"remove\": \"$is('admin')\"\n * }\n * ```\n */\n\nexports.main = async function (ctx) {\n\n  return async function (payload: any, params: any) {\n    const auth = payload || {}\n    const { permissions, roles } = await getPermissions(auth.uid)\n    return {\n      ...auth,\n      $has: (permissionName: string) => {\n        return permissions.includes(permissionName)\n      },\n      $is: (roleName: string) => {\n        return roles.includes(roleName)\n      }\n    }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "Injector: injector-admin",
            hash: "2dec6298069e5ab6f86d356ea4a806ba",
            tags: ["其它"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams: '{"code":"laf"}',
            version: 2,
            created_at: "2022-07-22T03:39:06.386Z",
            updated_at: "2022-07-22T03:39:06.386Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311ee",
            name: "injector-admin__ps0yJEnr",
            code: "import cloud from '@/cloud-sdk'\nimport * as crypto from 'crypto'\n\n/**\n * 本函数为 policy injector， 当用户请求 proxy/:policy 时，会调用本函数返回的函数获取该策略的 injections。\n * 返回的 injections 会注入到该策略规则中执行。\n * 例如，本例中返回了 $has 和 $is 函数，则在规则中可以这样使用：\n * ```json\n * {\n *   \"add\": \"$has('article.create')\",\n *   \"remove\": \"$is('admin')\"\n * }\n * ```\n */\n\nexports.main = async function (ctx) {\n\n  return async function (payload: any, params: any) {\n    const auth = payload || {}\n    const { permissions, roles } = await getPermissions(auth.uid)\n    return {\n      ...auth,\n      $has: (permissionName: string) => {\n        return permissions.includes(permissionName)\n      },\n      $is: (roleName: string) => {\n        return roles.includes(roleName)\n      }\n    }\n  }\n}\n\n\n/**\n * 通过 user id 获取权限列表\n * @param role_ids \n * @returns \n */\nasync function getPermissions(uid: string) {\n  const db = cloud.database()\n  // 查用户\n  const { data: admin } = await db.collection('admins')\n    .where({ _id: uid })\n    .getOne()\n\n\n  // 查角色\n  const { data: roles } = await db.collection('roles')\n    .where({\n      name: {\n        $in: admin.roles ?? []\n      }\n    })\n    .get()\n\n  if (!roles) {\n    return { permissions: [], roles: [], user: admin }\n  }\n\n  const permissions = []\n  for (const role of roles) {\n    const perms = role.permissions ?? []\n    permissions.push(...perms)\n  }\n\n  return {\n    permissions,\n    roles: roles.map(role => role.name),\n    user: admin\n  }\n}\n\n\n\n/**\n * 判断用户是否有权限\n * @param uid 用户ID\n * @param permission 权限名\n * @returns 0 表示用户有权限， 401 表示用户未登录， 403 表示用户未授权\n */\nasync function checkPermission(uid: string, permission: string): Promise<number> {\n  if (!uid) {\n    return 401\n  }\n  const { permissions } = await getPermissions(uid)\n\n  if (!permissions.includes(permission)) {\n    return 403\n  }\n  return 0\n}\n\n/**\n * @param {string} content\n * @return {string}\n */\nfunction hashPassword(content: string): string {\n  return crypto\n    .createHash('sha256')\n    .update(content)\n    .digest('hex')\n}\n\n",
            label: "Injector: injector-admin",
            hash: "2dec6298069e5ab6f86d356ea4a806ba",
            tags: ["其它"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams: '{"code":"laf"}',
            version: 2,
            created_at: "2022-07-22T08:57:19.680Z",
            updated_at: "2022-07-22T08:57:19.680Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311ba",
            name: "invoke-aliyun-api",
            code: "\nimport cloud from '@/cloud-sdk'\nimport * as querystring from 'querystring'\nimport * as crypto from 'crypto'\nimport * as assert from 'assert'\n\n/**\n * @param ApiEntryPoint\n * @param AccessKeyId\n * @param AccessKeySecret\n * @params ...others\n */\nexports.main = async function (ctx) {\n  assert.ok(ctx.body, 'empty body got')\n\n  const ApiEntryPoint = ctx.body.ApiEntryPoint\n  const AccessKeySecret = ctx.body.AccessKeySecret\n\n  const _params = Object.assign({\n    Format: 'json',\n    SignatureMethod: 'HMAC-SHA1',\n    SignatureNonce: crypto.randomUUID(),\n    SignatureVersion: '1.0',\n    Version: '2017-03-21',\n    Timestamp: (new Date()).toISOString()\n  }, ctx.body)\n\n  delete _params['ApiEntryPoint']\n  delete _params['AccessKeySecret']\n\n  console.log(_params)\n  const params = sortObjectKeys(_params)\n  params['Signature'] = specialEncode(sign(params, AccessKeySecret))\n\n  const query = querystring.stringify(params)\n\n  const url = `${ApiEntryPoint}?${query}`\n\n  console.log('=>', url)\n\n  try {\n    const r = await cloud.fetch(url)\n    return r.data\n  } catch (err) {\n    console.log(err.response.data)\n    throw err\n  }\n}\n\n// 签名\nfunction sign(raw_params: any, accessKeySecret: string) {\n  const params = encode(raw_params)\n\n  //拼接strToSign\n  let strToSign = '';\n  for (let i in params) {\n    strToSign += i + '=' + params[i] + '&';\n  }\n  strToSign = strToSign.substr(0, strToSign.length - 1);\n  strToSign = \"GET&\" + encodeURIComponent('/') + '&' + encodeURIComponent(strToSign);\n\n  // 阿里云签名是要求 基于 hash 的原始二进制值 进行 base64编码\n  const ret = crypto.createHmac('sha1', accessKeySecret + '&')\n    .update(strToSign)\n    .digest('base64')\n\n  return ret\n}\n\n//对各个参数进行字典序升序排序\nfunction sortObjectKeys(obj) {\n  const tmp = {};\n  Object.keys(obj).sort().forEach(k => tmp[k] = obj[k])\n  return tmp;\n}\n\n\n//对排序之后的参数进行 uriencode + POP 编码\nfunction encode(params) {\n  const obj = {}\n  //对urlencode之后的特殊字符进行替换\n  for (let i in params) {\n    const str = encodeURIComponent(params[i])\n    obj[i] = specialEncode(str)\n  }\n  return obj\n}\n\n// 阿里云的特殊编码(POP编码)\nfunction specialEncode(encoded) {\n  if (encoded.indexOf('+')) {\n    encoded.replace(\"+\", \"%20\");\n  } else if (encoded.indexOf('*')) {\n    encoded.replace(\"*\", \"%2A\");\n  } else if (encoded.indexOf('%7E')) {\n    encoded.replace(\"%7E\", \"~\");\n  }\n  return encoded\n}\n",
            label: "Service: 阿里云 OpenAPI 调用",
            hash: "af6debe8faa8f198c2d5d05bb263be82",
            tags: ["服务"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams:
              '{\n  "Action": "AssumeRole",\n  "AccessKeyId": "",\n  "AccessKeySecret": "",\n  "ApiEntryPoint": "https://sts.aliyuncs.com",\n  "RoleArn": "acs:ramhttps:://1068803073250874:role/ramosstest",\n  "RoleSessionName": "testUser",\n  "DurationSeconds": 3600\n}',
            version: 17,
            created_at: "2022-07-22T03:39:06.405Z",
            updated_at: "2022-07-22T03:39:06.405Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311ef",
            name: "invoke-aliyun-api__S4kONY95",
            code: "\nimport cloud from '@/cloud-sdk'\nimport * as querystring from 'querystring'\nimport * as crypto from 'crypto'\nimport * as assert from 'assert'\n\n/**\n * @param ApiEntryPoint\n * @param AccessKeyId\n * @param AccessKeySecret\n * @params ...others\n */\nexports.main = async function (ctx) {\n  assert.ok(ctx.body, 'empty body got')\n\n  const ApiEntryPoint = ctx.body.ApiEntryPoint\n  const AccessKeySecret = ctx.body.AccessKeySecret\n\n  const _params = Object.assign({\n    Format: 'json',\n    SignatureMethod: 'HMAC-SHA1',\n    SignatureNonce: crypto.randomUUID(),\n    SignatureVersion: '1.0',\n    Version: '2017-03-21',\n    Timestamp: (new Date()).toISOString()\n  }, ctx.body)\n\n  delete _params['ApiEntryPoint']\n  delete _params['AccessKeySecret']\n\n  console.log(_params)\n  const params = sortObjectKeys(_params)\n  params['Signature'] = specialEncode(sign(params, AccessKeySecret))\n\n  const query = querystring.stringify(params)\n\n  const url = `${ApiEntryPoint}?${query}`\n\n  console.log('=>', url)\n\n  try {\n    const r = await cloud.fetch(url)\n    return r.data\n  } catch (err) {\n    console.log(err.response.data)\n    throw err\n  }\n}\n\n// 签名\nfunction sign(raw_params: any, accessKeySecret: string) {\n  const params = encode(raw_params)\n\n  //拼接strToSign\n  let strToSign = '';\n  for (let i in params) {\n    strToSign += i + '=' + params[i] + '&';\n  }\n  strToSign = strToSign.substr(0, strToSign.length - 1);\n  strToSign = \"GET&\" + encodeURIComponent('/') + '&' + encodeURIComponent(strToSign);\n\n  // 阿里云签名是要求 基于 hash 的原始二进制值 进行 base64编码\n  const ret = crypto.createHmac('sha1', accessKeySecret + '&')\n    .update(strToSign)\n    .digest('base64')\n\n  return ret\n}\n\n//对各个参数进行字典序升序排序\nfunction sortObjectKeys(obj) {\n  const tmp = {};\n  Object.keys(obj).sort().forEach(k => tmp[k] = obj[k])\n  return tmp;\n}\n\n\n//对排序之后的参数进行 uriencode + POP 编码\nfunction encode(params) {\n  const obj = {}\n  //对urlencode之后的特殊字符进行替换\n  for (let i in params) {\n    const str = encodeURIComponent(params[i])\n    obj[i] = specialEncode(str)\n  }\n  return obj\n}\n\n// 阿里云的特殊编码(POP编码)\nfunction specialEncode(encoded) {\n  if (encoded.indexOf('+')) {\n    encoded.replace(\"+\", \"%20\");\n  } else if (encoded.indexOf('*')) {\n    encoded.replace(\"*\", \"%2A\");\n  } else if (encoded.indexOf('%7E')) {\n    encoded.replace(\"%7E\", \"~\");\n  }\n  return encoded\n}\n",
            label: "Service: 阿里云 OpenAPI 调用",
            hash: "af6debe8faa8f198c2d5d05bb263be82",
            tags: ["服务"],
            description: "",
            enableHTTP: false,
            status: 1,
            triggers: [],
            debugParams:
              '{\n  "Action": "AssumeRole",\n  "AccessKeyId": "",\n  "AccessKeySecret": "",\n  "ApiEntryPoint": "https://sts.aliyuncs.com",\n  "RoleArn": "acs:ramhttps:://1068803073250874:role/ramosstest",\n  "RoleSessionName": "testUser",\n  "DurationSeconds": 3600\n}',
            version: 17,
            created_at: "2022-07-22T08:57:19.710Z",
            updated_at: "2022-07-22T08:57:19.710Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da1bdb583927a711b311bb",
            name: "send-login-sms",
            code: "\nimport cloud from '@/cloud-sdk'\nconst db = cloud.database()\n\n/**\n * 发送登陆短信验证码：调用发短信的云函数。\n * check list:\n * 1. 检查手机号是否合法\n * 2. 检查手机号1分钟之内是否已发送过\n * 3. 检查手机号发送频率是否超限（30次/24小时）\n * 4. 发送验证码\n */\nexports.main = async function (ctx: FunctionContext) {\n  const { phone, codeType } = ctx.body\n\n  // 1. 检查手机号是否合法\n  if (!(/^1[3456789]\\d{9}$/.test(phone)))\n    return { code: 'INVALID_PHONE', error: '手机号码有误' }\n\n  // 检查手机号是否已注册\n  {\n    const { total } = await db.collection('users').where({ phone }).count()\n    if (total > 0) return { code: 'ALREADY_EXISTS', error: '该手机号已经被其它账户绑定' }\n  }\n\n  // 2. 检查手机号1分钟之内是否已发送过\n  {\n    const query = {\n      phone,\n      created_at: db.command.gt(Date.now() - 60 * 1000)\n    }\n    const { total } = await db.collection('sys_sms_history')\n      .where(query)\n      .count()\n\n    console.log('1min', { phone, total })\n    if (total > 0) return { code: 'REQUEST_OVERLIMIT', error: '短信发送过于频繁：1分钟后尝试' }\n  }\n\n  // 3. 检查手机号发送频率是否超限（30次/24小时）\n  {\n    const query = {\n      phone,\n      created_at: db.command.gt(Date.now() - 24 * 60 * 60 * 1000)\n    }\n    const { total } = await db.collection('sys_sms_history')\n      .where(query)\n      .count()\n\n    console.log('24h', { phone, total })\n    if (total > 30) return { code: 'REQUEST_OVERLIMIT', error: '短信发送过于频繁：24小时之内只能发送30次' }\n  }\n\n  // 4. 发送验证码\n  const code = Math.floor(Math.random() * 9000) + 1000\n  const ret = await cloud.invoke('aliyun-sms-service', { body: { phone, code } })\n  if (ret.code !== 0) return { code: ret.code, error: '短信发送失败', data: ret }\n\n  // 5. 保存记录\n  await db.collection('sys_sms_history')\n    .add({\n      phone,\n      code,\n      type: codeType ?? 'login',\n      status: 1,\n      created_at: Date.now()\n    })\n\n  console.log({ phone, code })\n  return { code: 0, data: 'success' }\n}\n",
            label: "App: 发送登陆短信验证码",
            hash: "6eabfafd079b896a383b8598ece8ec4a",
            tags: ["用户", "App"],
            description: "App: 发送登陆短信验证码",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams: '{\n  "phone": "13184211245"\n}',
            version: 7,
            created_at: "2022-07-22T03:39:06.472Z",
            updated_at: "2022-07-22T03:39:06.472Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
          {
            _id: "62da6670583927a711b311f0",
            name: "send-login-sms__HEtG0CaB",
            code: "\nimport cloud from '@/cloud-sdk'\nconst db = cloud.database()\n\n/**\n * 发送登陆短信验证码：调用发短信的云函数。\n * check list:\n * 1. 检查手机号是否合法\n * 2. 检查手机号1分钟之内是否已发送过\n * 3. 检查手机号发送频率是否超限（30次/24小时）\n * 4. 发送验证码\n */\nexports.main = async function (ctx: FunctionContext) {\n  const { phone, codeType } = ctx.body\n\n  // 1. 检查手机号是否合法\n  if (!(/^1[3456789]\\d{9}$/.test(phone)))\n    return { code: 'INVALID_PHONE', error: '手机号码有误' }\n\n  // 检查手机号是否已注册\n  {\n    const { total } = await db.collection('users').where({ phone }).count()\n    if (total > 0) return { code: 'ALREADY_EXISTS', error: '该手机号已经被其它账户绑定' }\n  }\n\n  // 2. 检查手机号1分钟之内是否已发送过\n  {\n    const query = {\n      phone,\n      created_at: db.command.gt(Date.now() - 60 * 1000)\n    }\n    const { total } = await db.collection('sys_sms_history')\n      .where(query)\n      .count()\n\n    console.log('1min', { phone, total })\n    if (total > 0) return { code: 'REQUEST_OVERLIMIT', error: '短信发送过于频繁：1分钟后尝试' }\n  }\n\n  // 3. 检查手机号发送频率是否超限（30次/24小时）\n  {\n    const query = {\n      phone,\n      created_at: db.command.gt(Date.now() - 24 * 60 * 60 * 1000)\n    }\n    const { total } = await db.collection('sys_sms_history')\n      .where(query)\n      .count()\n\n    console.log('24h', { phone, total })\n    if (total > 30) return { code: 'REQUEST_OVERLIMIT', error: '短信发送过于频繁：24小时之内只能发送30次' }\n  }\n\n  // 4. 发送验证码\n  const code = Math.floor(Math.random() * 9000) + 1000\n  const ret = await cloud.invoke('aliyun-sms-service', { body: { phone, code } })\n  if (ret.code !== 0) return { code: ret.code, error: '短信发送失败', data: ret }\n\n  // 5. 保存记录\n  await db.collection('sys_sms_history')\n    .add({\n      phone,\n      code,\n      type: codeType ?? 'login',\n      status: 1,\n      created_at: Date.now()\n    })\n\n  console.log({ phone, code })\n  return { code: 0, data: 'success' }\n}\n",
            label: "App: 发送登陆短信验证码",
            hash: "6eabfafd079b896a383b8598ece8ec4a",
            tags: ["用户", "App"],
            description: "App: 发送登陆短信验证码",
            enableHTTP: true,
            status: 1,
            triggers: [],
            debugParams: '{\n  "phone": "13184211245"\n}',
            version: 7,
            created_at: "2022-07-22T08:57:19.785Z",
            updated_at: "2022-07-22T08:57:19.785Z",
            created_by: "62da1b79f631f388462444d3",
            appid: "kixjnr",
          },
        ],

        resp,
      );
      break;
  }
}
