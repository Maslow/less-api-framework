openapi: 3.0.3
info:
  title: laf web api 1.0
  description: |-
    This is a laf web api document.

    Some useful links:
    - [The Laf repository](https://github.com/labring/laf)

  contact:
    email: lizhenq2009@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

servers:
  - url: https://lafyun.com/

tags:
  - name: app
    description: app 相关接口

  - name: functions
    description: Access to functions

  - name: collections
    description: 集合相关接口

paths:
  /api/app:
    get:
      tags:
        - app
      summary: 获取 app 列表
      operationId: getApp
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/App"
          application/xml:
            schema:
              $ref: "#/components/schemas/App"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/App"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/App"
            application/xml:
              schema:
                $ref: "#/components/schemas/App"
    post:
      tags:
        - app
      summary: 创建 app
      operationId: addApp
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/App"
          application/xml:
            schema:
              $ref: "#/components/schemas/App"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/App"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/App"
            application/xml:
              schema:
                $ref: "#/components/schemas/App"
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /api/app/{appId}:
    get:
      tags:
        - app
      summary: 获取 app 详情
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: appId
          in: path
          description: ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/App"
            application/xml:
              schema:
                $ref: "#/components/schemas/App"
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - app
      summary: 创建 app
      description: ""
      operationId: addApp
      parameters:
        - name: appId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 创建成功

    delete:
      tags:
        - app
      summary: 删除 app
      operationId: deleteApp
      parameters:
        - name: appId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 删除成功

  /app/{appId}/functions:
    get:
      tags:
        - functions
      summary: 应用函数列表
      parameters:
        - name: appId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 函数列表

    post:
      tags:
        - functions
      summary: 新建函数
      parameters:
        - name: appId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 函数列表

  /app/{appId}/functions/{functionId}:
    get:
      tags:
        - functions
      summary: 获取函数详情
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: functionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 删除
    put:
      tags:
        - functions
      summary: 更新
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: functionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 函数列表

    delete:
      tags:
        - functions
      summary: 删除
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: functionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 删除

  /app/{appId}/functions/{functionId}/deploy:
    post:
      tags:
        - functions
      summary: 发布
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: functionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 发布

  /app/{appId}/functions/{functionId}/execute:
    post:
      tags:
        - functions
      summary: 运行
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: functionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 发布


  /api/{appId}/collections:
    get:
      tags:
        - collections
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - collections
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
  /api/{appId}/collections/{collectionId}:
    get:
      tags:
        - collections
      summary: 集合详情
      description: '获取集合详情'
      parameters: []
      responses:
        '200':
          description: OK
    put:
      tags:
        - collections
      summary: 更新集合信息
      description: ''
      parameters: []
      responses:
        '200':
          description: OK

    delete:
      tags:
        - collections
      summary: 删除
      description: ''
      parameters: []
      responses:
        '200':
          description: OK

  /api/{appId}/collections/{collectionId}/indexes:
    get:
      tags:
        - collections
      summary: 索引列表
      description: '获取索引列表'
      parameters: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - collections
      summary: 添加索引
      description: 添加索引
      parameters: []
      responses:
        '200':
          description: OK
    put:
      tags:
        - collections
      summary: 更新索引
      description: 更新索引
      parameters: []
      responses:
        '200':
          description: OK
    delete:
      tags:
        - collections
      summary: 删除索引
      description: 删除索引
      parameters: []
      responses:
        '200':
          description: OK

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        appId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    App:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/App"
        application/xml:
          schema:
            $ref: "#/components/schemas/App"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
